#!/bin/sh

# This tool is just to demonstrate a possible usage.
# Ideally this is part of Bazel itself, replacing these hacks.

BAZEL=${BAZEL:-bazel}
W=WORKSPACE
L=LOCKFILE.bzl

get_string_field() {
	git grep -h -A999 -F "name = \"$1\"," -- $W \
	| grep -F "    $2 = " \
	| awk -v FS='"' '{print $2;}'
}

upgrade() {
	target="$1"; shift
	uid=$RANDOM$RANDOM$RANDOM

	# "unlock"
	sed "s% = locked,% = {},#locked$uid,%g" $W >$W.$uid
	mv $W.$uid $W
	printf 'locked = {\n    "version": "zero",\n' >$L.$uid

	txt=$(mktemp)
	dir=$(mktemp -d)
	$BAZEL --output_user_root="$dir" build "$target" >"$txt" 2>&1
	errcode=$?
	rm -rf "$dir"
	(cat "$txt" && rm "$txt") \
	| grep -F 'indicated that a canonical reproducible form can be obtained by' \
	| while read -r line; do
		name=$(echo "$line" | awk -v FS="'" '{print $2;}')

		pinned=$(echo "$line" \
				| awk -v FS='and dropping' '{print $1;}' \
				| awk -v FS='modifying arguments' '{print $2;}' \
				| sed -r 's% ([^ ]+) =% "\1":%g')
		pinned=${pinned# }
		pinned=${pinned% }

		kind=$(git grep -h -B1 -F 'name = "'$name'",' -- $W | head -n1 | sed 's%(%%')
		case "$kind" in
			http_archive)
				url=$(get_string_field "$name" url)
				printf '    "%s %s": {\n' "$kind" "$url" >>$L.$uid
				printf '        "": {%s},\n' "$pinned" >>$L.$uid
				printf '    },\n' >>$L.$uid
				;;
			git_repository)
				remote=$(get_string_field "$name" remote)
				printf '    "%s %s": {\n' "$kind" "$remote" >>$L.$uid
				vsn="tag $(get_string_field "$name" tag)"
				if [ "$vsn" = 'tag ' ]; then
					vsn="branch $(get_string_field "$name" branch)"
				fi
				printf '        "%s": {%s},\n' "$vsn" "$pinned" >>$L.$uid
				printf '    },\n' >>$L.$uid
				;;
			*)
				echo "Unsupported rule kind $kind"
				[ $errcode -eq 0 ] && errcode=1
				break
				;;
		esac
		[ $errcode -eq 0 ] && echo "Locked $kind '$name'"
	done

	if [ $errcode -ne 0 ]; then
		rm $L.$uid
	else
		mv $L.$uid $L
		printf '}\n' >>$L
		command -v buildifier >/dev/null 2>&1 && buildifier -lint=fix $L
	fi
	sed "s% = {},#locked$uid,% = locked,%g" $W >$W.$uid
	mv $W.$uid $W
	return $errcode
}

[ $# -ne 1 ] && echo "Usage: $0  <target to upgrade>" && exit 1

if [ -f $W ] && grep -F ' = locked,' -- $W >/dev/null; then
	upgrade "$1"
else
	echo "No $W relying on lockfile here."
	exit 1
fi
