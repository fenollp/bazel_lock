#!/bin/sh

# This tool is just to demonstrate a possible usage.
# Ideally this is part of Bazel itself, replacing these hacks.

BAZEL=${BAZEL:-bazel}
W=WORKSPACE
L=LOCKFILE.bzl

get_string_field() {
	git grep -h -A999 -F "name = \"$1\"," -- $W \
	| grep -F "    $2 = " \
	| awk -v FS='"' '{print $2;}'
}

lock() {
	printf '        "%s": {%s},' "$1" "$2"
}

upgrade() {
	target="$1"; shift
	uid=$(date +%N)

	# "unlock"
	sed 's%^    "version": "zero",$%    "version": "",%' $L >$L.$uid && mv $L.$uid $L
	txt=$(mktemp)
	dir=$(mktemp -d)
	$BAZEL --output_user_root="$dir" build "$target" >"$txt" 2>&1
	errcode=$?
	rm -rf "$dir"
	sed 's%^    "version": "",$%    "version": "zero",%' $L >$L.$uid && mv $L.$uid $L
	if [ $errcode -ne 0 ]; then
		rm "$txt"
		echo "Failed to run $BAZEL build $target"
		return $errcode
	fi
	printf 'locked = {\n' >$L.$uid
	printf '    "repositories": {\n' >>$L.$uid

	(cat "$txt" && rm "$txt") \
	| grep -F 'indicated that a canonical reproducible form can be obtained' \
	| while read -r line; do
		name=$(echo "$line" | awk -v FS="'" '{print $2;}')

		pinned=$(echo "$line" \
				| awk -v FS='and dropping' '{print $1;}' \
				| awk -v FS='modifying arguments' '{print $2;}' \
				| sed -E 's% ([^ ]+) =% "\1":%g')
		pinned=${pinned# }
		pinned=${pinned% }

		kind=$(git grep -h -B1 -F 'name = "'$name'",' -- $W | head -n1 | sed 's%(%%')
		case "$kind" in
			http_archive)
				url=$(get_string_field "$name" url)
				url_format=$(get_string_field "$name" url_format || '')
				format_resolver=$(get_string_field "$name" format_resolver || '')
				if [ -n "$url" ]; then
					if [ -n "$url_format" ] || [ -n "$format_resolver" ]; then
						echo "Rule '$name' cannot use url and url_format or format_resolver"
						errcode=1
						break
					fi
					lock "$name" "$pinned" >>$L.$uid
				fi
				format_hole=$(get_string_field "$name" format_hole || '')
				upgrade_constraint=$(get_string_field "$name" upgrade_constraint || '')
				upgrader=$(get_string_field "$name" upgrader || '')

				;;
			git_repository)
				lock "$name" "$pinned" >>$L.$uid
				;;
			*)
				echo "Unsupported rule kind $kind"
				errcode=1
				break
				;;
		esac
		[ $errcode -eq 0 ] && echo "Locked $kind(name = \"$name\", ...)"
	done

	if [ $errcode -eq 0 ]; then
		mv $L.$uid $L
		printf '    },\n' >>$L
		printf '    "version": "zero",\n' >>$L
		printf '}\n' >>$L
		command -v buildifier >/dev/null 2>&1 && buildifier -lint=fix $L
	fi
	return $errcode
}

[ $# -ne 1 ] && echo "Usage: $0  <target to upgrade>" && exit 1

if [ -f $W ] && grep -F ' = locked,' -- $W >/dev/null; then
	upgrade "$1"
else
	echo "No $W relying on lockfile here."
	exit 1
fi
